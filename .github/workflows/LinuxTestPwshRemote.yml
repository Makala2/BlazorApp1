name: publish to Nexus

on:
  push:
    branches: [ "master" ]
  #pull_request:
  #  branches: [ "master" ]

jobs:
  build-and-publish:
    runs-on: [self-hosted, Linux, X64]
    environment: Dev 

    steps:
    #- name: Checkout code
    #  uses: actions/checkout@v4
      
    #- name: Setup .NET
    #  uses: actions/setup-dotnet@v4
    #  with:
    #    dotnet-version: 8.0.x
    #  env:
    #    DOTNET_INSTALL_DIR: .
        
    #- name: Restore dependencies
    #  run: dotnet restore
      
    #- name: Build
    #  run: dotnet build --configuration Release --no-restore        

    #- name: publish
    #  run: |
    #      New-Item -Path ".\output\" -ItemType Directory
    #      dotnet publish -c Release -o ".\output\"
    #      Compress-Archive -Path ".\output\*" -DestinationPath ".\BlazorApp1.zip"

    #- name: install PSWSMan
    #  shell: pwsh
    #  run: |
    #    Install-Module -Name PSWSMan -Scope CurrentUser -Repository PSGallery -Force
    #    $path = "./opt/microsoft/powershell/7/libmi.so"
    #    New-Item -Path $path -ItemType File -Force
    #    Install-WSMan
    #    $user = "${{ secrets.USER }}"
    #    $pass = ConvertTo-SecureString ${{ secrets.PASSWORD }} -AsPlainText -Force
    #    $cred = New-Object System.Management.Automation.PSCredential($user, $pass)
    #    $session = New-PSSession -ComputerName ${{ vars.SERV }} -Credential $cred       
    #    $sourcePath = ".\BlazorApp1.zip" 
    #    $destPath = "C:\Temp\" 
    #    Copy-Item $sourcePath -Destination $destPath -ToSession $session

    #- name: give permition to folder
    #  shell: bash
    #  run: sudo chmod u+rwx "./opt/microsoft/powershell/7/libmi.so"

    #- name: install WSMan
    #  shell: pwsh
    #  run: Install-WSMan
    - name: install pywinrm
      shell: bash
      run: | 
        pip install pywinrm
        import winrm
        session = winrm.Session(
          'http:${{ vars.SERV }}:5985/wsman',
          auth=('${{ secrets.USER }}', '${{ secrets.PASSWORD }}'),
          transport='ntlm',
          server_cert_validatin='ignore'
        )
        result = session.run('iisreset /stop', 'iisreset /start')
        print("STDOUT:\n", result.std_out.decode())
        print("STDERR:\n", result.std_err.decode())
